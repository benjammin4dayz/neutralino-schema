{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.","additionalProperties":false,"properties":{"$schema":{"type":"string"},"applicationId":{"description":"Unique string to identify your application. \n\n Eg: js.neutralino.sample","pattern":"^[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*$","type":"string"},"defaultMode":{"description":"Mode of the application. \nAccepted values are window, browser, cloud, and chrome. \nHowever, having a config file is not mandatory to start a Neutralinojs app since the Neutralinojs framework often loads reasonable defaults for all configuration options.","enum":["window","browser","cloud","chrome"],"type":"string","x-intellij-enum-metadata":{"browser":"Runs the application in the user's default browser.","chrome":"Runs the application as a Chrome application.","cloud":"Runs the application as a background server.","window":"Runs the application on a native window."}},"version":{"description":"Semantic version of the application \n Eg: 2.4.22\n\nFollows the semantic versioning pattern. See https://semver.org/","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$","type":"string"},"documentRoot":{"description":"Sets the document root for the static server. For example, if you need to use 'resources' directory as the document root, you can use setup 'documentRoot' as follows. \n\n { \n   \"documentRoot\": \"/resource/\", \n   \"url\": \"/\" \n } \n\n Make sure to configure 'url' properly with the document root. The following configuration is wrong, it instructs the static server to fetch resources from './resources/resources'. \n\n { \n   \"documentRoot\": \"/resources/\", \n   \"url\": \"/resources/\" \n } \n\n However, you can use a sub-directory in URL, as shown below. \n\n { \n   \"documentRoot\": \"/\", \n   \"url\": \"/resources/\" \n }","type":"string"},"enableExtensions":{"default":false,"description":"Enables/disables extensions.","type":"boolean"},"enableNativeAPI":{"default":false,"description":"Enables or disables the native API. If you want to use any native API functions, you can set this option to 'true'.","type":"boolean"},"enableServer":{"default":false,"description":"Enables or disables the background server (Disables static file serving feature and native API messaging). If you load a remote URL to the webview, you can set this option to 'false'. Make sure to set this option to 'true' if you load resources from local sources.","type":"boolean"},"exportAuthInfo":{"description":"Exports authentication details to the '${NL_PATH}/.tmp/auth_info.json' file with the following JSON structure. \n\n { \n   \"port\": \"<port>\", \n   \"accessToken\": \"<access_token>\" \n } \n\n You can use the above authentication details to connect with Neutralinojs from external processes by using WebSocket as an IPC mechanism.","type":"boolean"},"extensions":{"description":"An array of extension definitions. Enable extensions by adding the following setting to your app config. \n\n \"enableExtensions\": true \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/how-to/extensions-overview.md#defining-the-extensions","items":{"properties":{"command":{"description":"A cross-platform command to start the extension. Eg: 'node ${NL_PATH}/extensions/binary/main.js' will work on every platform.","type":"string"},"commandDarwin":{"description":"Extension startup command for MacOS.","type":"string"},"commandLinux":{"description":"Extension startup command for Linux.","type":"string"},"commandWindows":{"description":"Extension startup command for Windows.","type":"string"},"id":{"description":"A unique key to identify the extension.","pattern":"^[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*$","type":"string"}},"required":["id"],"type":"object"},"type":"array"},"globalVariables":{"description":"A key-value-based JavaScript object of custom global variables. \n\n You can make custom global variables too via 'neutralino.config.json', as shown below. \n\n \"globalVariables\": { \n   \"TEST\": \"Test Value\" \n } \n\n The above custom global variable's value can be accessed with 'NL_TEST'. You can set any data type for custom global variables. Look at the following examples. \n\n \"globalVariables\": { \n   \"TEST_1\": 1, \n   \"TEST_2\": null, \n   \"TEST_3\": 3.5, \n   \"TEST_4\": [3, 5, 4, 5], \n   \"TEST_5\": { \n     \"key\": \"value\", \n     \"anotherKey\": 100 \n   } \n } \n\n Avoid overriding predefined global variables. \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/api/global-variables.md#custom-global-variables","type":"object"},"logging":{"additionalProperties":false,"properties":{"enabled":{"description":"Enables or disables the logging feature.","type":"boolean"},"writeToLogFile":{"description":"Enables or disables log file. If this setting is 'false', the framework won't write log to 'neutralinojs.log', and it will write logs to standard streams.","type":"boolean"}},"type":"object"},"nativeAllowList":{"description":"An array of native methods needs to be allowed from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeAllowList\": [\"os.getEnv\"], \n   \"nativeAllowList\": [\"storage.*\"] \n }","items":{"type":"string"},"type":"array"},"nativeBlockList":{"description":"An array of native methods needs to be blocked from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeBlockList\": [\"os.execCommand\"], \n   \"nativeBlockList\": [\"app.*\"] \n }","items":{"type":"string"},"type":"array"},"port":{"description":"The port of your application. If the value is 0, Neutralinojs will use a random available port.","type":"integer"},"serverHeaders":{"description":"Custom headers for the static server and Websocket handshake process. For example, the following configuration sends a custom header with every outgoing HTTP response. \n\n { \n   \"serverHeaders\": { \n     \"Test-Header-Option\": \"Value\" \n   } \n }","type":"object"},"singlePageServe":{"default":false,"description":"Activates SPA (Single Page App) serving. When this option is enabled, the static server module serves the primary index.html file for sub-directory requests only if another index.html doesn't exist in a specific sub-directory. The default value for this option is false.","type":"boolean"},"tokenSecurity":{"default":"one-time","description":"Neutralinojs uses a client-server communication pattern with a local WebSocket to handle native calls. This local server is protected with an auto-generated token. This option defines the security implementation for the token. \n\n Accepts the following values: \n\n - one-time (Recommended): Server sends the access token only once, and the client persists it in the sessionStorage. If another client (Eg: browser) tries to access the app, 'NE_RT_INVTOKN' error message will be shown instead of the application. Using this option is recommended since it reduces security issues. \n\n - none: Server sends the access token always, so any new client can see the application. \n\n ::: Danger: If you are using native APIs that can access your computer's internals such as 'os', 'filesystem', modules, never use 'none' option since any new client can use those APIs. :::","enum":["one-time","none"],"type":"string","x-intellij-enum-metadata":{"none":"Server sends the access token always, so any new client can see the application.","one-time":"(Recommended): Server sends the access token only once, and the client persists it in the 'sessionStorage'."}},"url":{"description":"The entry URL of the application. Neutralinojs will initially load this URL. This property accepts both relative and absolute URLs. See following examples. \n\n \"url\": \"/\" \n\n The above config loads 'http://localhost:<port>/' URL initially (internally '/index.html' is loaded). You can use remote urls too. \n\n \"url\": \"http://example.com\"","type":"string"},"cli":{"additionalProperties":false,"description":"Configuration values for the neu CLI.","properties":{"autoReloadExclude":{"description":"A JavaScript regular expression to exclude files from the auto-reload file watcher.","type":"string"},"binaryName":{"description":"Binary file name of your application. If it is myapp, all binaries will use myapp-PLATFORM_ARCH format.","type":"string"},"binaryVersion":{"description":"Neutralinojs server version. Get nightly builds by using the nightly tag.","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?|nightly$","type":"string","enum":["5.4.0","5.3.0","5.2.0","5.1.0","5.0.0","4.15.0","4.14.1","4.14.0","4.13.0","4.12.0","4.11.0","4.10.0","4.9.0","4.8.0","4.7.0","4.6.0","4.5.0","4.4.0","4.3.0","4.2.0","4.1.0","4.0.0","3.0.0","3.0.0-hotfix","2.8.0","2.7.0","2.6.0","2.5.0","2.4.1","2.4.0"]},"clientLibrary":{"description":"Filename of the Neutralinojs JavaScript library.","type":"string"},"clientVersion":{"description":"Neutralinojs client version. Get nightly builds by using the nightly tag.","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?|nightly$","type":"string","enum":["5.4.0","5.3.0","5.2.0","5.1.1","5.1.0","5.0.1","5.0.0","3.13.0","3.12.0","3.11.0","3.10.0","3.9.0","3.8.2","3.8.0","3.7.0","3.6.0","3.5.0","3.4.0","3.3.0","3.2.0","3.1.0","3.0.0","2.0.0","1.5.0","1.4.0","1.3.0","1.2.0","1.1.0","1.0.0","nightly"]},"distributionPath":{"description":"Sets the build path for neu CLI. For example, if you need to get the built binaries in build folder instead of dist, you can set the distributionPath accordingly.","type":"string"},"extensionsExclude":{"description":"Regex pattern to exclude files from the extensions directory of the final app package.","type":"string"},"extensionsPath":{"description":"Path of your application extensions.","type":"string"},"resourcesExclude":{"description":"Regex pattern to exclude files from final app bundle.","type":"string"},"resourcesPath":{"description":"Path of your application resources.","type":"string"},"frontendLibrary":{"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":false,"properties":{"buildCommand":{"description":"The neu build command will execute this command before generating the app bundle, so you can generate bundled version of frontend library code.","type":"string"},"devCommand":{"description":"This command will run with the neu run command to start the frontend library's development server.","type":"string"},"devUrl":{"description":"The URL of the frontend library's development server.","type":"string"},"initCommand":{"description":"A command that gets executed after downloading a host app template with the neu create command.","type":"string"},"patchFile":{"description":"Path of the HTML entry file for the frontend library.","type":"string"},"projectPath":{"description":"The path to the project.","type":"string"},"waitTimeout":{"default":20000,"description":"The time in milliseconds to wait for the frontend library's development server to start. By default, the max time is 20 seconds.","type":"number"}},"required":[],"type":"object"},"hostProject":{"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":true,"properties":{"buildCommand":{"description":"The neu build command will execute this command before generating the app bundle, so you can generate bundled version of host project code.","type":"string"},"buildPath":{"description":"Location where the final ready-to-distribute host project files will be stored after the execution of buildCommand. Files in this folder are copied into the app bundle path after the execution of neu build command.","type":"string"},"devCommand":{"description":"This command will run with the neu run command to start the host project.","type":"string"},"initCommand":{"description":"A command that gets executed after downloading a host app template with the neu create command.","type":"string"},"projectPath":{"description":"The path to the project.","type":"string"}},"required":[],"type":"object"}},"required":[],"type":"object"},"modes":{"additionalProperties":false,"description":"You can override the configuration values from different modes. For example, you can use a specific URL in root-level and another URL in window-mode-level.","properties":{"browser":{"additionalProperties":false,"description":"Properties for browser mode. See https://neutralino.js.org/docs/configuration/modes/#browser for more information.","properties":{"documentRoot":{"description":"Sets the document root for the static server. For example, if you need to use 'resources' directory as the document root, you can use setup 'documentRoot' as follows. \n\n { \n   \"documentRoot\": \"/resource/\", \n   \"url\": \"/\" \n } \n\n Make sure to configure 'url' properly with the document root. The following configuration is wrong, it instructs the static server to fetch resources from './resources/resources'. \n\n { \n   \"documentRoot\": \"/resources/\", \n   \"url\": \"/resources/\" \n } \n\n However, you can use a sub-directory in URL, as shown below. \n\n { \n   \"documentRoot\": \"/\", \n   \"url\": \"/resources/\" \n }","type":"string"},"enableExtensions":{"default":false,"description":"Enables/disables extensions.","type":"boolean"},"enableNativeAPI":{"default":false,"description":"Enables or disables the native API. If you want to use any native API functions, you can set this option to 'true'.","type":"boolean"},"enableServer":{"default":false,"description":"Enables or disables the background server (Disables static file serving feature and native API messaging). If you load a remote URL to the webview, you can set this option to 'false'. Make sure to set this option to 'true' if you load resources from local sources.","type":"boolean"},"exportAuthInfo":{"description":"Exports authentication details to the '${NL_PATH}/.tmp/auth_info.json' file with the following JSON structure. \n\n { \n   \"port\": \"<port>\", \n   \"accessToken\": \"<access_token>\" \n } \n\n You can use the above authentication details to connect with Neutralinojs from external processes by using WebSocket as an IPC mechanism.","type":"boolean"},"extensions":{"description":"An array of extension definitions. Enable extensions by adding the following setting to your app config. \n\n \"enableExtensions\": true \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/how-to/extensions-overview.md#defining-the-extensions","items":{"properties":{"command":{"description":"A cross-platform command to start the extension. Eg: 'node ${NL_PATH}/extensions/binary/main.js' will work on every platform.","type":"string"},"commandDarwin":{"description":"Extension startup command for MacOS.","type":"string"},"commandLinux":{"description":"Extension startup command for Linux.","type":"string"},"commandWindows":{"description":"Extension startup command for Windows.","type":"string"},"id":{"description":"A unique key to identify the extension.","pattern":"^[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*$","type":"string"}},"required":["id"],"type":"object"},"type":"array"},"globalVariables":{"description":"A key-value-based JavaScript object of custom global variables. \n\n You can make custom global variables too via 'neutralino.config.json', as shown below. \n\n \"globalVariables\": { \n   \"TEST\": \"Test Value\" \n } \n\n The above custom global variable's value can be accessed with 'NL_TEST'. You can set any data type for custom global variables. Look at the following examples. \n\n \"globalVariables\": { \n   \"TEST_1\": 1, \n   \"TEST_2\": null, \n   \"TEST_3\": 3.5, \n   \"TEST_4\": [3, 5, 4, 5], \n   \"TEST_5\": { \n     \"key\": \"value\", \n     \"anotherKey\": 100 \n   } \n } \n\n Avoid overriding predefined global variables. \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/api/global-variables.md#custom-global-variables","type":"object"},"logging":{"additionalProperties":false,"properties":{"enabled":{"description":"Enables or disables the logging feature.","type":"boolean"},"writeToLogFile":{"description":"Enables or disables log file. If this setting is 'false', the framework won't write log to 'neutralinojs.log', and it will write logs to standard streams.","type":"boolean"}},"type":"object"},"nativeAllowList":{"description":"An array of native methods needs to be allowed from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeAllowList\": [\"os.getEnv\"], \n   \"nativeAllowList\": [\"storage.*\"] \n }","items":{"type":"string"},"type":"array"},"nativeBlockList":{"description":"An array of native methods needs to be blocked from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeBlockList\": [\"os.execCommand\"], \n   \"nativeBlockList\": [\"app.*\"] \n }","items":{"type":"string"},"type":"array"},"port":{"description":"The port of your application. If the value is 0, Neutralinojs will use a random available port.","type":"integer"},"serverHeaders":{"description":"Custom headers for the static server and Websocket handshake process. For example, the following configuration sends a custom header with every outgoing HTTP response. \n\n { \n   \"serverHeaders\": { \n     \"Test-Header-Option\": \"Value\" \n   } \n }","type":"object"},"singlePageServe":{"default":false,"description":"Activates SPA (Single Page App) serving. When this option is enabled, the static server module serves the primary index.html file for sub-directory requests only if another index.html doesn't exist in a specific sub-directory. The default value for this option is false.","type":"boolean"},"tokenSecurity":{"default":"one-time","description":"Neutralinojs uses a client-server communication pattern with a local WebSocket to handle native calls. This local server is protected with an auto-generated token. This option defines the security implementation for the token. \n\n Accepts the following values: \n\n - one-time (Recommended): Server sends the access token only once, and the client persists it in the sessionStorage. If another client (Eg: browser) tries to access the app, 'NE_RT_INVTOKN' error message will be shown instead of the application. Using this option is recommended since it reduces security issues. \n\n - none: Server sends the access token always, so any new client can see the application. \n\n ::: Danger: If you are using native APIs that can access your computer's internals such as 'os', 'filesystem', modules, never use 'none' option since any new client can use those APIs. :::","enum":["one-time","none"],"type":"string","x-intellij-enum-metadata":{"none":"Server sends the access token always, so any new client can see the application.","one-time":"(Recommended): Server sends the access token only once, and the client persists it in the 'sessionStorage'."}},"url":{"description":"The entry URL of the application. Neutralinojs will initially load this URL. This property accepts both relative and absolute URLs. See following examples. \n\n \"url\": \"/\" \n\n The above config loads 'http://localhost:<port>/' URL initially (internally '/index.html' is loaded). You can use remote urls too. \n\n \"url\": \"http://example.com\"","type":"string"}},"type":"object"},"chrome":{"additionalProperties":false,"description":"Properties for chrome mode. See https://neutralino.js.org/docs/configuration/modes/#chrome for more information.","properties":{"documentRoot":{"description":"Sets the document root for the static server. For example, if you need to use 'resources' directory as the document root, you can use setup 'documentRoot' as follows. \n\n { \n   \"documentRoot\": \"/resource/\", \n   \"url\": \"/\" \n } \n\n Make sure to configure 'url' properly with the document root. The following configuration is wrong, it instructs the static server to fetch resources from './resources/resources'. \n\n { \n   \"documentRoot\": \"/resources/\", \n   \"url\": \"/resources/\" \n } \n\n However, you can use a sub-directory in URL, as shown below. \n\n { \n   \"documentRoot\": \"/\", \n   \"url\": \"/resources/\" \n }","type":"string"},"enableExtensions":{"default":false,"description":"Enables/disables extensions.","type":"boolean"},"enableNativeAPI":{"default":false,"description":"Enables or disables the native API. If you want to use any native API functions, you can set this option to 'true'.","type":"boolean"},"enableServer":{"default":false,"description":"Enables or disables the background server (Disables static file serving feature and native API messaging). If you load a remote URL to the webview, you can set this option to 'false'. Make sure to set this option to 'true' if you load resources from local sources.","type":"boolean"},"exportAuthInfo":{"description":"Exports authentication details to the '${NL_PATH}/.tmp/auth_info.json' file with the following JSON structure. \n\n { \n   \"port\": \"<port>\", \n   \"accessToken\": \"<access_token>\" \n } \n\n You can use the above authentication details to connect with Neutralinojs from external processes by using WebSocket as an IPC mechanism.","type":"boolean"},"extensions":{"description":"An array of extension definitions. Enable extensions by adding the following setting to your app config. \n\n \"enableExtensions\": true \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/how-to/extensions-overview.md#defining-the-extensions","items":{"properties":{"command":{"description":"A cross-platform command to start the extension. Eg: 'node ${NL_PATH}/extensions/binary/main.js' will work on every platform.","type":"string"},"commandDarwin":{"description":"Extension startup command for MacOS.","type":"string"},"commandLinux":{"description":"Extension startup command for Linux.","type":"string"},"commandWindows":{"description":"Extension startup command for Windows.","type":"string"},"id":{"description":"A unique key to identify the extension.","pattern":"^[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*$","type":"string"}},"required":["id"],"type":"object"},"type":"array"},"globalVariables":{"description":"A key-value-based JavaScript object of custom global variables. \n\n You can make custom global variables too via 'neutralino.config.json', as shown below. \n\n \"globalVariables\": { \n   \"TEST\": \"Test Value\" \n } \n\n The above custom global variable's value can be accessed with 'NL_TEST'. You can set any data type for custom global variables. Look at the following examples. \n\n \"globalVariables\": { \n   \"TEST_1\": 1, \n   \"TEST_2\": null, \n   \"TEST_3\": 3.5, \n   \"TEST_4\": [3, 5, 4, 5], \n   \"TEST_5\": { \n     \"key\": \"value\", \n     \"anotherKey\": 100 \n   } \n } \n\n Avoid overriding predefined global variables. \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/api/global-variables.md#custom-global-variables","type":"object"},"logging":{"additionalProperties":false,"properties":{"enabled":{"description":"Enables or disables the logging feature.","type":"boolean"},"writeToLogFile":{"description":"Enables or disables log file. If this setting is 'false', the framework won't write log to 'neutralinojs.log', and it will write logs to standard streams.","type":"boolean"}},"type":"object"},"nativeAllowList":{"description":"An array of native methods needs to be allowed from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeAllowList\": [\"os.getEnv\"], \n   \"nativeAllowList\": [\"storage.*\"] \n }","items":{"type":"string"},"type":"array"},"nativeBlockList":{"description":"An array of native methods needs to be blocked from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeBlockList\": [\"os.execCommand\"], \n   \"nativeBlockList\": [\"app.*\"] \n }","items":{"type":"string"},"type":"array"},"port":{"description":"The port of your application. If the value is 0, Neutralinojs will use a random available port.","type":"integer"},"serverHeaders":{"description":"Custom headers for the static server and Websocket handshake process. For example, the following configuration sends a custom header with every outgoing HTTP response. \n\n { \n   \"serverHeaders\": { \n     \"Test-Header-Option\": \"Value\" \n   } \n }","type":"object"},"singlePageServe":{"default":false,"description":"Activates SPA (Single Page App) serving. When this option is enabled, the static server module serves the primary index.html file for sub-directory requests only if another index.html doesn't exist in a specific sub-directory. The default value for this option is false.","type":"boolean"},"tokenSecurity":{"default":"one-time","description":"Neutralinojs uses a client-server communication pattern with a local WebSocket to handle native calls. This local server is protected with an auto-generated token. This option defines the security implementation for the token. \n\n Accepts the following values: \n\n - one-time (Recommended): Server sends the access token only once, and the client persists it in the sessionStorage. If another client (Eg: browser) tries to access the app, 'NE_RT_INVTOKN' error message will be shown instead of the application. Using this option is recommended since it reduces security issues. \n\n - none: Server sends the access token always, so any new client can see the application. \n\n ::: Danger: If you are using native APIs that can access your computer's internals such as 'os', 'filesystem', modules, never use 'none' option since any new client can use those APIs. :::","enum":["one-time","none"],"type":"string","x-intellij-enum-metadata":{"none":"Server sends the access token always, so any new client can see the application.","one-time":"(Recommended): Server sends the access token only once, and the client persists it in the 'sessionStorage'."}},"url":{"description":"The entry URL of the application. Neutralinojs will initially load this URL. This property accepts both relative and absolute URLs. See following examples. \n\n \"url\": \"/\" \n\n The above config loads 'http://localhost:<port>/' URL initially (internally '/index.html' is loaded). You can use remote urls too. \n\n \"url\": \"http://example.com\"","type":"string"},"args":{"description":"Additional command-line arguments for the Chrome process.","type":"string"},"height":{"description":"Height of the chrome window.","type":"integer"},"width":{"description":"Width of the chrome window.","type":"integer"}},"type":"object"},"cloud":{"additionalProperties":false,"description":"Properties for cloud mode. See https://neutralino.js.org/docs/configuration/modes/#cloud for more information.","properties":{"documentRoot":{"description":"Sets the document root for the static server. For example, if you need to use 'resources' directory as the document root, you can use setup 'documentRoot' as follows. \n\n { \n   \"documentRoot\": \"/resource/\", \n   \"url\": \"/\" \n } \n\n Make sure to configure 'url' properly with the document root. The following configuration is wrong, it instructs the static server to fetch resources from './resources/resources'. \n\n { \n   \"documentRoot\": \"/resources/\", \n   \"url\": \"/resources/\" \n } \n\n However, you can use a sub-directory in URL, as shown below. \n\n { \n   \"documentRoot\": \"/\", \n   \"url\": \"/resources/\" \n }","type":"string"},"enableExtensions":{"default":false,"description":"Enables/disables extensions.","type":"boolean"},"enableNativeAPI":{"default":false,"description":"Enables or disables the native API. If you want to use any native API functions, you can set this option to 'true'.","type":"boolean"},"enableServer":{"default":false,"description":"Enables or disables the background server (Disables static file serving feature and native API messaging). If you load a remote URL to the webview, you can set this option to 'false'. Make sure to set this option to 'true' if you load resources from local sources.","type":"boolean"},"exportAuthInfo":{"description":"Exports authentication details to the '${NL_PATH}/.tmp/auth_info.json' file with the following JSON structure. \n\n { \n   \"port\": \"<port>\", \n   \"accessToken\": \"<access_token>\" \n } \n\n You can use the above authentication details to connect with Neutralinojs from external processes by using WebSocket as an IPC mechanism.","type":"boolean"},"extensions":{"description":"An array of extension definitions. Enable extensions by adding the following setting to your app config. \n\n \"enableExtensions\": true \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/how-to/extensions-overview.md#defining-the-extensions","items":{"properties":{"command":{"description":"A cross-platform command to start the extension. Eg: 'node ${NL_PATH}/extensions/binary/main.js' will work on every platform.","type":"string"},"commandDarwin":{"description":"Extension startup command for MacOS.","type":"string"},"commandLinux":{"description":"Extension startup command for Linux.","type":"string"},"commandWindows":{"description":"Extension startup command for Windows.","type":"string"},"id":{"description":"A unique key to identify the extension.","pattern":"^[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*$","type":"string"}},"required":["id"],"type":"object"},"type":"array"},"globalVariables":{"description":"A key-value-based JavaScript object of custom global variables. \n\n You can make custom global variables too via 'neutralino.config.json', as shown below. \n\n \"globalVariables\": { \n   \"TEST\": \"Test Value\" \n } \n\n The above custom global variable's value can be accessed with 'NL_TEST'. You can set any data type for custom global variables. Look at the following examples. \n\n \"globalVariables\": { \n   \"TEST_1\": 1, \n   \"TEST_2\": null, \n   \"TEST_3\": 3.5, \n   \"TEST_4\": [3, 5, 4, 5], \n   \"TEST_5\": { \n     \"key\": \"value\", \n     \"anotherKey\": 100 \n   } \n } \n\n Avoid overriding predefined global variables. \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/api/global-variables.md#custom-global-variables","type":"object"},"logging":{"additionalProperties":false,"properties":{"enabled":{"description":"Enables or disables the logging feature.","type":"boolean"},"writeToLogFile":{"description":"Enables or disables log file. If this setting is 'false', the framework won't write log to 'neutralinojs.log', and it will write logs to standard streams.","type":"boolean"}},"type":"object"},"nativeAllowList":{"description":"An array of native methods needs to be allowed from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeAllowList\": [\"os.getEnv\"], \n   \"nativeAllowList\": [\"storage.*\"] \n }","items":{"type":"string"},"type":"array"},"nativeBlockList":{"description":"An array of native methods needs to be blocked from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeBlockList\": [\"os.execCommand\"], \n   \"nativeBlockList\": [\"app.*\"] \n }","items":{"type":"string"},"type":"array"},"port":{"description":"The port of your application. If the value is 0, Neutralinojs will use a random available port.","type":"integer"},"serverHeaders":{"description":"Custom headers for the static server and Websocket handshake process. For example, the following configuration sends a custom header with every outgoing HTTP response. \n\n { \n   \"serverHeaders\": { \n     \"Test-Header-Option\": \"Value\" \n   } \n }","type":"object"},"singlePageServe":{"default":false,"description":"Activates SPA (Single Page App) serving. When this option is enabled, the static server module serves the primary index.html file for sub-directory requests only if another index.html doesn't exist in a specific sub-directory. The default value for this option is false.","type":"boolean"},"tokenSecurity":{"default":"one-time","description":"Neutralinojs uses a client-server communication pattern with a local WebSocket to handle native calls. This local server is protected with an auto-generated token. This option defines the security implementation for the token. \n\n Accepts the following values: \n\n - one-time (Recommended): Server sends the access token only once, and the client persists it in the sessionStorage. If another client (Eg: browser) tries to access the app, 'NE_RT_INVTOKN' error message will be shown instead of the application. Using this option is recommended since it reduces security issues. \n\n - none: Server sends the access token always, so any new client can see the application. \n\n ::: Danger: If you are using native APIs that can access your computer's internals such as 'os', 'filesystem', modules, never use 'none' option since any new client can use those APIs. :::","enum":["one-time","none"],"type":"string","x-intellij-enum-metadata":{"none":"Server sends the access token always, so any new client can see the application.","one-time":"(Recommended): Server sends the access token only once, and the client persists it in the 'sessionStorage'."}},"url":{"description":"The entry URL of the application. Neutralinojs will initially load this URL. This property accepts both relative and absolute URLs. See following examples. \n\n \"url\": \"/\" \n\n The above config loads 'http://localhost:<port>/' URL initially (internally '/index.html' is loaded). You can use remote urls too. \n\n \"url\": \"http://example.com\"","type":"string"}},"type":"object"},"window":{"additionalProperties":false,"description":"Properties for window mode. See https://neutralino.js.org/docs/configuration/modes/#window for more information.","properties":{"documentRoot":{"description":"Sets the document root for the static server. For example, if you need to use 'resources' directory as the document root, you can use setup 'documentRoot' as follows. \n\n { \n   \"documentRoot\": \"/resource/\", \n   \"url\": \"/\" \n } \n\n Make sure to configure 'url' properly with the document root. The following configuration is wrong, it instructs the static server to fetch resources from './resources/resources'. \n\n { \n   \"documentRoot\": \"/resources/\", \n   \"url\": \"/resources/\" \n } \n\n However, you can use a sub-directory in URL, as shown below. \n\n { \n   \"documentRoot\": \"/\", \n   \"url\": \"/resources/\" \n }","type":"string"},"enableExtensions":{"default":false,"description":"Enables/disables extensions.","type":"boolean"},"enableNativeAPI":{"default":false,"description":"Enables or disables the native API. If you want to use any native API functions, you can set this option to 'true'.","type":"boolean"},"enableServer":{"default":false,"description":"Enables or disables the background server (Disables static file serving feature and native API messaging). If you load a remote URL to the webview, you can set this option to 'false'. Make sure to set this option to 'true' if you load resources from local sources.","type":"boolean"},"exportAuthInfo":{"description":"Exports authentication details to the '${NL_PATH}/.tmp/auth_info.json' file with the following JSON structure. \n\n { \n   \"port\": \"<port>\", \n   \"accessToken\": \"<access_token>\" \n } \n\n You can use the above authentication details to connect with Neutralinojs from external processes by using WebSocket as an IPC mechanism.","type":"boolean"},"extensions":{"description":"An array of extension definitions. Enable extensions by adding the following setting to your app config. \n\n \"enableExtensions\": true \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/how-to/extensions-overview.md#defining-the-extensions","items":{"properties":{"command":{"description":"A cross-platform command to start the extension. Eg: 'node ${NL_PATH}/extensions/binary/main.js' will work on every platform.","type":"string"},"commandDarwin":{"description":"Extension startup command for MacOS.","type":"string"},"commandLinux":{"description":"Extension startup command for Linux.","type":"string"},"commandWindows":{"description":"Extension startup command for Windows.","type":"string"},"id":{"description":"A unique key to identify the extension.","pattern":"^[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+)*$","type":"string"}},"required":["id"],"type":"object"},"type":"array"},"globalVariables":{"description":"A key-value-based JavaScript object of custom global variables. \n\n You can make custom global variables too via 'neutralino.config.json', as shown below. \n\n \"globalVariables\": { \n   \"TEST\": \"Test Value\" \n } \n\n The above custom global variable's value can be accessed with 'NL_TEST'. You can set any data type for custom global variables. Look at the following examples. \n\n \"globalVariables\": { \n   \"TEST_1\": 1, \n   \"TEST_2\": null, \n   \"TEST_3\": 3.5, \n   \"TEST_4\": [3, 5, 4, 5], \n   \"TEST_5\": { \n     \"key\": \"value\", \n     \"anotherKey\": 100 \n   } \n } \n\n Avoid overriding predefined global variables. \n\n Learn more about this option here: \n https://github.com/neutralinojs/neutralinojs.github.io/blob/main/docs/api/global-variables.md#custom-global-variables","type":"object"},"logging":{"additionalProperties":false,"properties":{"enabled":{"description":"Enables or disables the logging feature.","type":"boolean"},"writeToLogFile":{"description":"Enables or disables log file. If this setting is 'false', the framework won't write log to 'neutralinojs.log', and it will write logs to standard streams.","type":"boolean"}},"type":"object"},"nativeAllowList":{"description":"An array of native methods needs to be allowed from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeAllowList\": [\"os.getEnv\"], \n   \"nativeAllowList\": [\"storage.*\"] \n }","items":{"type":"string"},"type":"array"},"nativeBlockList":{"description":"An array of native methods needs to be blocked from the frontend of the application. The wildcard character '*' is allowed inside entries. \n\n { \n   \"nativeBlockList\": [\"os.execCommand\"], \n   \"nativeBlockList\": [\"app.*\"] \n }","items":{"type":"string"},"type":"array"},"port":{"description":"The port of your application. If the value is 0, Neutralinojs will use a random available port.","type":"integer"},"serverHeaders":{"description":"Custom headers for the static server and Websocket handshake process. For example, the following configuration sends a custom header with every outgoing HTTP response. \n\n { \n   \"serverHeaders\": { \n     \"Test-Header-Option\": \"Value\" \n   } \n }","type":"object"},"singlePageServe":{"default":false,"description":"Activates SPA (Single Page App) serving. When this option is enabled, the static server module serves the primary index.html file for sub-directory requests only if another index.html doesn't exist in a specific sub-directory. The default value for this option is false.","type":"boolean"},"tokenSecurity":{"default":"one-time","description":"Neutralinojs uses a client-server communication pattern with a local WebSocket to handle native calls. This local server is protected with an auto-generated token. This option defines the security implementation for the token. \n\n Accepts the following values: \n\n - one-time (Recommended): Server sends the access token only once, and the client persists it in the sessionStorage. If another client (Eg: browser) tries to access the app, 'NE_RT_INVTOKN' error message will be shown instead of the application. Using this option is recommended since it reduces security issues. \n\n - none: Server sends the access token always, so any new client can see the application. \n\n ::: Danger: If you are using native APIs that can access your computer's internals such as 'os', 'filesystem', modules, never use 'none' option since any new client can use those APIs. :::","enum":["one-time","none"],"type":"string","x-intellij-enum-metadata":{"none":"Server sends the access token always, so any new client can see the application.","one-time":"(Recommended): Server sends the access token only once, and the client persists it in the 'sessionStorage'."}},"url":{"description":"The entry URL of the application. Neutralinojs will initially load this URL. This property accepts both relative and absolute URLs. See following examples. \n\n \"url\": \"/\" \n\n The above config loads 'http://localhost:<port>/' URL initially (internally '/index.html' is loaded). You can use remote urls too. \n\n \"url\": \"http://example.com\"","type":"string"},"alwaysOnTop":{"description":"Activates the top-most mode.","type":"boolean"},"borderless":{"description":"Activates the borderless mode.","type":"boolean"},"center":{"description":"Centers the native app window initially. The default value is false.","type":"boolean"},"enableInspector":{"description":"Automatically opens the developer tools window.","type":"boolean"},"exitProcessOnClose":{"description":"If this setting is true, the app process will exit when the user clicks on the close button. Otherwise, the framework will dispatch the windowClose event.","type":"boolean"},"extendUserAgentWith":{"description":"Extends the default webview-specific user agent string with a custom suffix. If this value is not set, the webview sets the default user agent from the platform-specific rendering engine (i.e., WebKit on GNU/Linux).","type":"string"},"fullScreen":{"description":"Activates the full-screen mode. The default value is false.","type":"boolean"},"height":{"description":"Height of the native window. The default value is 600.","type":"number"},"hidden":{"description":"Make the window invisible. This setting can be used to develop background services.","type":"boolean"},"icon":{"description":"Application icon's file name. You can directly point to an image file in the resources directory. We recommend you to choose a transparent PNG file.","type":"string"},"maxHeight":{"description":"Maximum height of the native window. The default value is the height value.","type":"number"},"maxWidth":{"description":"Maximum width of the native window. The default value is the width value.","type":"number"},"maximize":{"description":"Launches the application maximized.","type":"boolean"},"minHeight":{"description":"Minimum height of the native window. The default value is the height value.","type":"number"},"minWidth":{"description":"Minimum width of the native window. The default value is the width value.","type":"number"},"resizable":{"description":"Make the window resizable or not. The default value is true.","type":"boolean"},"title":{"description":"Title of the native window. The default value is the applicationId.","type":"string"},"transparent":{"description":"Enables the transparent native window mode for the application instance. If the transparency mode is activated, users can see through the webview if the webpage background uses transparent background colors. Partial transparency can be activated using the rgba() CSS color function. You can use this feature to create semi-transparent windows, windows with custom shadows, and custom-shaped window frames. The default value is false. Note: Unlike in other platforms, Windows native window becomes borderless (window controls will be hidden) with the activation of the transparent mode.","type":"boolean"},"useSavedState":{"description":"Save and load the primary window state (width, height, x, y, values and maximized status) automatically. The default value is true.","type":"boolean"},"width":{"description":"Width of the native window. The default value is 800.","type":"number"},"x":{"description":"Left position (x) of the native window. The default value is the value of the environment variable NL_WINDOW_X or -1.","type":"number"},"y":{"description":"Right position (y) of the native window. The default value is the value of the environment variable NL_WINDOW_Y or -1.","type":"number"}},"type":"object"}},"required":[],"type":"object"}},"required":[],"type":"object"}